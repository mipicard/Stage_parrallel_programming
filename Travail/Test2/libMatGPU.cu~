/*
	MULTIPLICATION DE 2 MATRICE : M*N -> P
	Sur GPU
*/
// Librairies non GPU
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <math.h>

//Librairies GPU
#include <cutil.h>

#include "libMat.h" //Librairie des matrices sur GPU

void multGPU1_Square(const float *M,const float *N,float *P,const int Width){
	if(Width>512){printf("L'algorithme actuel ne permet pas des calculs de matrices de taille supérieur à 512");exit(EXIT_SUCCESS);}
	int taille = Width * Width * sizeof(float);
	
	//initialisation des matrices sur le GPU
	float *Mg=iniSquareGPU(M,taille),*Ng=iniSquareGPU(N,taille);
	float *Pg=NULL;
	if((cudaMalloc((void **)&Pg,taille))!=cudaSuccess){exit(EXIT_FAILURE);}
	
	
	//copie de la matrice obtenue
	if((cudaMemcpy(P,Pg,taille,cudaMemcpyDeviceToHost)) != cudaSuccess){exit(EXIT_FAILURE);}
	//libération des matrices sur le GPU
	cudaFree(Mg);
	cudaFree(Ng);
	cudaFree(Pg);
}

float* iniSquareGPU(const float *M,const int taille){
	float *Mg=NULL;
	if((cudaMalloc((void **)&Mg,taille)) != cudaSuccess){exit(EXIT_FAILURE);}
	if((cudaMemcpy(Mg,M,taille,cudaMemcpyHostToDevice)) != cudaSuccess){exit(EXIT_FAILURE);}
	return Mg;
}
